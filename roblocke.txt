---lua roblox
local s=game:GetService("DataStoreService")
local experienceStore = s:GetDataStore("Core_Transmitter_of_Scripts")
local user_json={}
local user_data={"Void:1.1.1"}
local items={"SpawnLocation","Protected","Terrain","Camera"}
while game.Players:GetChildren()[1]==nil do wait() end
local k=0
local function eraseitems()
	for i=1,#game.Workspace:GetChildren() do
		print(#game.Workspace:GetChildren())
		local deletable=false

		for j=1,table.maxn(items) do

			if game.Workspace:GetChildren()[i-k].Name==items[j] then

				deletable=true

			end
		end
		if deletable==false then
			print(i..","..k+1)
			if game.Players:FindFirstChild(game.Workspace:GetChildren()[i-k].Name)==nil then

				game.Workspace:GetChildren()[i-k]:Destroy()
				k=k+1	
			end

		end	
	end


end

for i=1,#game.Players:GetChildren() do
	

user_json=experienceStore:GetAsync("user_"..game.Players:GetChildren()[i].UserId)

	if (user_json)~="null" then
		game.Workspace.RemoteEvent:FireClient(game.Players:GetChildren()[i],user_json)
		
		user_data=game:GetService("HttpService"):JSONDecode(user_json)
		
	end
end




game.Players.PlayerRemoving:Connect(function(plr)
	local a =plr.UserId
	local data
	local success,error = pcall(function()
		data=experienceStore:GetAsync("user"..a)
	end)
	while success==false do 
		success,error = pcall(function()
				data=experienceStore:GetAsync("user"..a)
		end)

	end
	
	if success then
	
		local data_size,success2,error
		success2,error=pcall(function()
			
			data_size=table.maxn(user_data)
			
		end)
		while success2==false do
			wait()
			success2,error=pcall(function()

				data_size=table.maxn(user_data)
			end)
		end
		
	
		if data_size>0 then
			user_data=game:GetService("HttpService"):JSONEncode(user_data)

		end
		 if data~=nil then
			user_data=data
		end
		
			local success,error=pcall(function()
				experienceStore:SetAsync("user_"..a,user_data)
				
			end)
			while success==false do
				wait()
			success,error=pcall(function()
				
					experienceStore:SetAsync("user_"..a,user_data)

				end)
			end
			
		end	
end)
